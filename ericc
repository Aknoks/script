local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/un-named%20backups/jans", true))()

local Window = Library:CreateWindow("Tradelands for ericc")

player = game.Players.LocalPlayer

getgenv().PickaxeCallback = true
getgenv().AxeCallback = true

local Virtual = game:GetService("VirtualInputManager")

function Swing()
    local ohString1 = "left"
    local ohTable2 = {
        [1] = {
            [1] = player.Character.HumanoidRootPart,
            [2] = 3
        },
        [2] = {
            [1] = player.Character.Head,
            [2] = 1
        },
        [3] = {
            [1] = player.Character.LeftHand,
            [2] = 1
        },
        [4] = {
            [1] = player.Character.RightHand,
            [2] = 1
        },
        [5] = {
            [1] = player.Character.LeftLowerArm,
            [2] = 2
        },
        [6] = {
            [1] = player.Character.RightLowerArm,
            [2] = 2
        },
        [7] = {
            [1] = player.Character.LeftUpperArm,
            [2] = 2
        },
        [8] = {
            [1] = player.Character.RightUpperArm,
            [2] = 2
        },
        [9] = {
            [1] = player.Character.LeftFoot,
            [2] = 1
        },
        [10] = {
            [1] = player.Character.LeftLowerLeg,
            [2] = 2
        },
        [11] = {
            [1] = player.Character.UpperTorso,
            [2] = 3
        },
        [12] = {
            [1] = player.Character.LeftUpperLeg,
            [2] = 2
        },
        [13] = {
            [1] = player.Character.RightFoot,
            [2] = 1
        },
        [14] = {
            [1] = player.Character.RightLowerLeg,
            [2] = 2
        },
        [15] = {
            [1] = player.Character.LowerTorso,
            [2] = 2
        },
        [16] = {
            [1] = player.Character.RightUpperLeg,
            [2] = 2
        }
    }

    player.Character.ActiveGear.ToolScript.Swing:FireServer(ohString1, ohTable2)
end

function Warehouse(quantity, thing)
    local ohTable1 = {
        [1] = thing,
        [2] = 8,
        [3] = 0,
        [4] = 0,
        [5] = 4
    }
    local ohNumber2 = quantity
    
    game:GetService("ReplicatedStorage").RemoteFunctionz.Items.MoveToWarehouse:FireServer(ohTable1, ohNumber2)
end

function GetWarehouse(quantity, thing)
    local ohTable1 = {
        [1] = thing,
        [2] = 7,
        [3] = 0,
        [4] = 0,
        [5] = 5.6000000000000005
    }
    local ohNumber2 = quantity
    
    game:GetService("ReplicatedStorage").RemoteFunctionz.Items.MoveFromWarehouse:FireServer(ohTable1, ohNumber2)
end

function NoClip()
    for _, child in pairs(player.Character:GetDescendants()) do
        if child:IsA("BasePart") and child.CanCollide == true then
            child.CanCollide = false
        end
    end
end


local function Closest(model)
    local character = player.Character
    local root = character and character.PrimaryPart

    if root == nil then return end

    local studs = math.huge
    local part;

    for _, obj in ipairs(model:GetDescendants()) do
        if obj:IsA('BasePart') and obj.Name == "Stump" and obj.Parent:FindFirstChild("Leaves") then
            local distance = (root.Position - obj.Position).Magnitude
            if distance < studs then
                studs = distance
                part = obj
            end
        end
    end

    return part
end

local function Closest2(model)
    local character = player.Character
    local root = character and character.PrimaryPart

    if root == nil then return end

    local studs = math.huge
    local part;

    for _, obj in ipairs(model:GetDescendants()) do
        if obj:IsA('BasePart') and obj.Name == "OreNode" and obj.Broken.Value == false then
            local distance = (root.Position - obj.Position).Magnitude
            if distance < studs then
                studs = distance
                part = obj
            end
        end
    end

    return part
end

function CraftAxe()
    local ohString1 = "Axe"
    local ohString2 = "Oak"
    local ohString3 = "Iron"
    local ohTable4 = {
        [1] = {
            [1] = "Iron",
            [2] = 5
        },
        [2] = {
            [1] = "Oak",
            [2] = 7
        }
    }

    game:GetService("ReplicatedStorage").RemoteFunctionz.Items.Craft:InvokeServer(ohString1, ohString2, ohString3, ohTable4)
end

function CraftPickaxe()
    local ohString1 = "Pickaxe"
    local ohString2 = "Oak"
    local ohString3 = "Iron"
    local ohTable4 = {
        [1] = {
            [1] = "Iron",
            [2] = 7
        },
        [2] = {
            [1] = "Oak",
            [2] = 5
        }
    }

    game:GetService("ReplicatedStorage").RemoteFunctionz.Items.Craft:InvokeServer(ohString1, ohString2, ohString3, ohTable4)
end

function SwapPickaxe()
    local ohNumber1 = 2
    local ohTable2 = {
        [1] = "Pickaxe",
        [2] = "100/100",
        [3] = 1,
        [4] = 2,
        [5] = 6
    }
    
    game:GetService("ReplicatedStorage").RemoteFunctionz.Items.InventorySwap:FireServer(ohNumber1, ohTable2)
end

function SwapAxe()
    local ohNumber1 = 1
    local ohTable2 = {
        [1] = "Axe",
        [2] = "100/100",
        [3] = 1,
        [4] = 2,
        [5] = 6
    }

    game:GetService("ReplicatedStorage").RemoteFunctionz.Items.InventorySwap:FireServer(ohNumber1, ohTable2)
end

getgenv().speed = 200
getgenv().distance = -4

Window:AddToggle({text = "Auto Chop Wood", callback = function(bool)
    if bool then
        chopwood = game:GetService("RunService").Stepped:Connect(function()
            if player.PlayerGui.GameGui.Inventory.Slot_1.ItemName.Value == "Axe" or player.PlayerGui.GameGui.Inventory.Slot_2.ItemName.Value == "Axe" or player.PlayerGui.GameGui.Inventory.Slot_3.ItemName.Value == "Axe" then
                if player.Character:FindFirstChild("ActiveGear") then
                    Target = Closest(game.Workspace.Trees)
                    if (player.Character.HumanoidRootPart.Position - Target.Position).Magnitude <= 3000 then
                        if player.PlayerGui.GameGui.Inventory.ScrollingFrame:FindFirstChild("Oak") then
                            if player.PlayerGui.GameGui.Inventory.ScrollingFrame.Oak.Quantity.Text > "0" then
                                Warehouse(tonumber(player.PlayerGui.GameGui.Inventory.ScrollingFrame.Oak.Quantity.Text), "Oak")
                            end
                        end
                        NoClip()
                        local Tween = game:service'TweenService':Create(player.Character.HumanoidRootPart, TweenInfo.new(player:DistanceFromCharacter(Target.Position + Vector3.new(0, 100, 0)) / speed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {CFrame = Target.CFrame + Target.CFrame.LookVector * distance})
                        Tween:Play()
                        wait(player:DistanceFromCharacter(Target.Position + Vector3.new(0, 100, 0))/speed + 0)
                        Swing()
                    end
                else
                    game:GetService("ReplicatedStorage").RemoteFunctionz.Gear.Equip:FireServer(true, 1, "Axe", 1, 2)
                end
            elseif player.PlayerGui.GameGui.Inventory.ScrollingFrame:FindFirstChild("Pickaxe") then
                SwapAxe()
            elseif AxeCallback then
                getgenv().AxeCallback = false
                GetWarehouse(5, "Iron")
                GetWarehouse(7, "Oak")
                CraftAxe()
                task.wait(0.5)
                getgenv().AxeCallback = true
            end
        end)
    else
        chopwood:Disconnect()
        for _, child in pairs(player.Character:GetDescendants()) do
            if child:IsA("BasePart") or child:IsA("MeshPart") and child.CanCollide == false then
                child.CanCollide = true
            end
        end
    end
end})

Window:AddToggle({text = "Auto Mine", callback = function(bool)
    if bool then
        chopwood = game:GetService("RunService").Stepped:Connect(function()
            if player.PlayerGui.GameGui.Inventory.Slot_1.ItemName.Value == "Pickaxe" or player.PlayerGui.GameGui.Inventory.Slot_2.ItemName.Value == "Pickaxe" or player.PlayerGui.GameGui.Inventory.Slot_3.ItemName.Value == "Pickaxe" then
                if player.Character:FindFirstChild("ActiveGear") then
                    Target = Closest2(game.Workspace.OreNodes)
                    if (player.Character.HumanoidRootPart.Position - Target.Position).Magnitude <= 3000 then
                        if player.PlayerGui.GameGui.Inventory.ScrollingFrame:FindFirstChild("Iron") then
                            if player.PlayerGui.GameGui.Inventory.ScrollingFrame.Iron.Quantity.Text > "0" then
                                Warehouse(tonumber(player.PlayerGui.GameGui.Inventory.ScrollingFrame.Iron.Quantity.Text), "Iron")
                            end
                        end
                        NoClip()
                        local Tween = game:service'TweenService':Create(player.Character.HumanoidRootPart, TweenInfo.new(player:DistanceFromCharacter(Target.Position + Vector3.new(0, 100, 0)) / speed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {CFrame = Target.CFrame + Target.CFrame.LookVector * distance})
                        Tween:Play()
                        wait(player:DistanceFromCharacter(Target.Position + Vector3.new(0, 100, 0))/speed + 0)
                        Swing()
                    end
                else
                    game:GetService("ReplicatedStorage").RemoteFunctionz.Gear.Equip:FireServer(true, 2, "Pickaxe", 1, 2)
                end
            elseif player.PlayerGui.GameGui.Inventory.ScrollingFrame:FindFirstChild("Pickaxe") then
                SwapPickaxe()
            elseif PickaxeCallback then
                getgenv().PickaxeCallback = false
                GetWarehouse(7, "Iron")
                GetWarehouse(5, "Oak")
                CraftPickaxe()
                task.wait(0.5)
                getgenv().PickaxeCallback = true
            end
        end)
    else
        chopwood:Disconnect()
        for _, child in pairs(player.Character:GetDescendants()) do
            if child:IsA("BasePart") or child:IsA("MeshPart") and child.CanCollide == false then
                child.CanCollide = true
            end
        end
    end
end})

Library:Init()
